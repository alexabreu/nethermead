<div class="map-container">
	<div class="zoom-controls">
		<button type="button" class="btn btn-default zoom-in"><span class="glyphicon glyphicon-plus"></span></button>
		<button type="button" class="btn btn-default zoom-out"><span class="glyphicon glyphicon-minus"></span></button>
	</div>
</div>

<div class="popover top">
  <div class="arrow"></div>
  <h3 class="popover-title"></h3>
  <div class="popover-content">
    <p></p>
  </div>
</div>

<style>
.background {
  fill: none;
  pointer-events: all;
}

.feature {
  fill: #ccc;
  cursor: pointer;
}

.feature.active {
  fill: orange;
}
.county:hover {
	fill:orange;
}

.state-border {
  fill: none;
  stroke: white;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width:1.2px;
}

.zoom-controls {
	position: absolute;
	top: 0px;
	left: 0px;
}

.map-container {
	position: relative;
}
</style>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script>

var width = 960,
    height = 500,
    active = d3.select(null);

var projection = d3.geo.albersUsa()
    .scale(1000)
    .translate([width / 2, height / 2]);

var zoom = d3.behavior.zoom()
    .translate([0, 0])
    .scale(1)
    .scaleExtent([1, 8])
    .on("zoom", zoomed);

var path = d3.geo.path()
    .projection(projection);

var svg = d3.select(".map-container").append("svg")
    .attr("width", width)
    .attr("height", height)
    .on("click", stopped, true);

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .on("click", reset);

var g = svg.append("g");
counties = g.append("g").attr("class", "counties");

svg
    .call(zoom) // delete this line to disable free zooming
    .call(zoom.event);

d3.json("/assets/states.json", function(error, topology) {
	console.log(topology);
	g.append("path")
		.datum(topojson.mesh(topology, topology.objects.states, function(a,b) {return a !== b; }))
		.attr("class", "state-border")
		.attr("d", path);
		
	$('.zoom-in').click(zoomIn);
	$('.zoom-out').click(zoomOut);
	
});

d3.json("/assets/counties.json", function(error, us) {
	console.log(us);
  counties.selectAll("path")
      .data(topojson.feature(us, us.objects.counties).features)
      .enter()
      .append("path")
      	.attr("d", path)
      	.attr("class", "county feature")
      	.on("click", clicked)
      	.on("mouseover", mouseOver)
      	.each(function(d,i) {
      			$(this).popover({title:			d.properties.county,
												content:		'Next up, show the data...',
												container:	'body',
												placement:	'top',
												trigger:		'hover'});
      	});
});



function clicked(d) {
  if (active.node() === this) return reset();
  active.classed("active", false);
  active = d3.select(this).classed("active", true);

  var bounds = path.bounds(d),
      dx = bounds[1][0] - bounds[0][0],
      dy = bounds[1][1] - bounds[0][1],
      x = (bounds[0][0] + bounds[1][0]) / 2,
      y = (bounds[0][1] + bounds[1][1]) / 2,
      scale = .075 / Math.max(dx / width, dy / height),
      translate = [width / 2 - scale * x, height / 2 - scale * y];

  svg.transition()
      .duration(750)
      .call(zoom.translate(translate).scale(scale).event);
}

function reset() {
  active.classed("active", false);
  active = d3.select(null);

  svg.transition()
      .duration(750)
      .call(zoom.translate([0, 0]).scale(1).event);
}

function zoomed() {
  g.style("stroke-width", 1.5 / d3.event.scale + "px");
  g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
}

function zoomIn(e) {
	if (zoom.scale() < 8) {
		svg.transition().call(zoom.translate([0, 0]).scale(zoom.scale()+0.075).event)
	}
}

function zoomOut(e) {
	if (zoom.scale() > 0.75) {
		svg.transition().call(zoom.translate([0, 0]).scale(zoom.scale()-0.075).event)
	}
}

function mouseOver(d) {
}

// If the drag behavior prevents the default click,
// also stop propagation so we donâ€™t click-to-zoom.
function stopped() {
  if (d3.event.defaultPrevented) d3.event.stopPropagation();
}

</script>